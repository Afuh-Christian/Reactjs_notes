

postSlice.js


import createAsyncThunk


##########################################################################################################
//..........................................................................
import { createSlice,nanoid,createAsyncThunk } from "@reduxjs/toolkit";
//..........................................................................
import {sub} from 'date-fns' 




const initialState = {
    posts:[],
    status: 'idle', //'idle' | 'loading' | 'succeed' | 'failed'
    error: null
}

const postSlice = createSlice({
    name:"post",
    initialState,
    reducers:{
    postAdd :{   
    reducer(state,action){
//..........................................................
            state.posts.push(action.payload)
//..........................................................
        },
       
        prepare(title,content,userId){
            return {
                payload:{
                    id:nanoid(),
                    title,
                    content,
                    
                    date:new Date().toISOString(),
                    
                    userId,
                    
                    reactions:{
                        thumbsUp:0,
                        wow:0,
                        heart:0,
                        rocket:0,
                        coffee:0
                    }
                    
                    
                    
                
                }
            }
        }
        

    },
    reactionAdded(state,action){
        const {postId,reaction} = action.payload 
//..........................................................
        const existingPost = state.posts.find(post => post.id === postId)
//..........................................................       
        if(existingPost){
            existingPost.reactions[reaction]++
        }
    }
    
}
})

//..........................................................
export const getAllpost = (state) => state.posts.posts
//..........................................................


export const {postAdd,reactionAdded} = postSlice.actions


export default postSlice.reducer


##########################################################################################################
Import Axios

-npm install  axios



//..........................................................................
import { createSlice,nanoid,createAsyncThunk } from "@reduxjs/toolkit";
//..........................................................................
import {sub} from 'date-fns' 


//........................
import axios from "axios";
//........................

//.........api endpoint...........................
const POST_URL = 'https://jsonplaceholder.typicode.com/posts';
//.........api...........................



//.............fetching the endpoint with the createAsync method ..............................
export const fetchPosts = createAsyncThunk('posts/fetchPosts',async () => {
   //createAsyncthunk takes 2 parameters ...
   // - 1 = used as the prefix for the generated action type
   // - 2nd = is a payload  creator callback(this function should return a promise that contain some data or reject a promise )
   
    try{
        const response = await axios.get(POST_URL) 
        return [...response.data];
    }catch(err){
        return err.message
    }
})
//..............................................................................................

const initialState = {
    posts:[],
    status: 'idle', //'idle' | 'loading' | 'succeed' | 'failed'
    error: null
}

const postSlice = createSlice({
    name:"post",
    initialState,
    reducers:{
    postAdd :{   
    reducer(state,action){
//..........................................................
            state.posts.push(action.payload)
//..........................................................
        },
       
        prepare(title,content,userId){
            return {
                payload:{
                    id:nanoid(),
                    title,
                    content,
                    
                    date:new Date().toISOString(),
                    
                    userId,
                    
                    reactions:{
                        thumbsUp:0,
                        wow:0,
                        heart:0,
                        rocket:0,
                        coffee:0
                    }
                    
                    
                    
                
                }
            }
        }
        

    },
    reactionAdded(state,action){
        const {postId,reaction} = action.payload 
//..........................................................
        const existingPost = state.posts.find(post => post.id === postId)
//..........................................................       
        if(existingPost){
            existingPost.reactions[reaction]++
        }
    }
    
}
})

//..........................................................
export const getAllpost = (state) => state.posts.posts
//..........................................................


export const {postAdd,reactionAdded} = postSlice.actions


export default postSlice.reducer



##########################################################################################################
We need to create another reduders that can support these api we have (createThunk)

extraReducers(builder){}

builder = an object that let's us define additional case reducers that run in response to the actions  
	  defined ouside the slice



postSlice.js


import { createSlice,nanoid,createAsyncThunk } from "@reduxjs/toolkit";

import {sub} from 'date-fns' 



import axios from "axios";


const POST_URL = 'https://jsonplaceholder.typicode.com/posts';



//.............fetching the endpoint with the createAsync method ..............................
export const fetchPosts = createAsyncThunk('posts/fetchPosts',async () => {
   //createAsyncthunk takes 2 parameters ...
   // - 1 = used as the prefix for the generated action type
   // - 2nd = is a payload  creator callback(this function should return a promise that contain some data or reject a promise )
   
    try{
        const response = await axios.get(POST_URL) 
        return [...response.data];
    }catch(err){
        return err.message
    }
})


const initialState = {
    posts:[],
    status: 'idle', //'idle' | 'loading' | 'succeed' | 'failed'
    error: null
}

const postSlice = createSlice({
    name:"post",
    initialState,
    reducers:{
    postAdd :{   
    reducer(state,action){

            state.posts.push(action.payload)

        },
       
        prepare(title,content,userId){
            return {
                payload:{
                    id:nanoid(),
                    title,
                    content,
                    
                    date:new Date().toISOString(),
                    
                    userId,
                    
                    reactions:{
                        thumbsUp:0,
                        wow:0,
                        heart:0,
                        rocket:0,
                        coffee:0
                    }
                    
                    
                    
                
                }
            }
        }


    },
    reactionAdded(state,action){
        const {postId,reaction} = action.payload 
        const existingPost = state.posts.find(post => post.id === postId)       
        if(existingPost){
            existingPost.reactions[reaction]++
        }
    }
},

//..........................reducers  for the api .................................................
extraReducers(builder){
    builder
        .addCase(fetchPosts.pending, (state,action) => {
            state.status = 'loading'
        })
        .addCase(fetchPosts.fulfilled,(state,action) => {
            state.status  = 'succeeded' 
            //Adding date and reactions 
            let min = 1 
            const loadedPosts = action.payload.map(post => {
                post.date = sub(new Date(),{minutes:min++}).toISOString,
                post.reactions = {
                    thumbsUp: 0,
                    hooray:0,
                    heart:0,
                    rocket:0,
                    eyes:0
                }
                return post;
            })
            // Add any fetched posts to the array 
            state.posts = state.posts.concat(loadedPosts)
        })
        .addCase(fetchPosts.rejected,(state,action) => {
            state.status = 'failed'
            state.error = action.error.message
        })
}
//...........................................................................
})


export const getAllpost = (state) => state.posts.posts



export const {postAdd,reactionAdded} = postSlice.actions


export default postSlice.reducer



##########################################################################################################
PostList.js






##########################################################################################################



##########################################################################################################


##########################################################################################################

##########################################################################################################