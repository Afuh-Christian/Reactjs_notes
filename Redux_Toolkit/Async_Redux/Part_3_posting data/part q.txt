
Adding data to this api ......




######################################################################################################################3
postSlice.js





import { createSlice,nanoid,createAsyncThunk } from "@reduxjs/toolkit";
import {sub} from 'date-fns' 
import axios from "axios";
const POST_URL = 'https://jsonplaceholder.typicode.com/posts';

//httpGet
export const fetchPosts = createAsyncThunk('posts/fetchPosts',async () => {

    try{
        const response = await axios.get(POST_URL) 
        return [...response.data];
    }catch(err){
        return err.message
    }
})

//httpPost
//.....................................................................................................
export const addNewPost = createAsyncThunk('posts/addNewPost',async (initialPost) => {
    try{
        const response = await axios.post(POST_URL,initialPost) 
        return [...response.data];
    }catch(err){ 
        return err.message
    }
})
//.....................................................................................................




const initialState = {
    posts:[],
    status: 'idle', //'idle' | 'loading' | 'succeed' | 'failed'
    error: null
}

const postSlice = createSlice({
    name:"post",
    initialState,
    reducers:{
    postAdd :{   
    reducer(state,action){

            state.posts.push(action.payload)

        },
       
        prepare(title,content,userId){
            return {
                payload:{
                    id:nanoid(),
                    title,
                    content,
                    date:new Date().toISOString(),
                    userId,                    
                    reactions:{
                        thumbsUp:0,
                        wow:0,
                        heart:0,
                        rocket:0,
                        coffee:0
                    }
                }
            }
        }


    },
    reactionAdded(state,action){
        const {postId,reaction} = action.payload 
        const existingPost = state.posts.find(post => post.id === postId)       
        if(existingPost){
            existingPost.reactions[reaction]++
        }
    }
},

extraReducers(builder){
    builder
        .addCase(fetchPosts.pending, (state,action) => {
            state.status = 'loading'
        })
        .addCase(fetchPosts.fulfilled,(state,action) => {
            state.status  = 'succeeded' 
            //Adding date and reactions 
            let min = 1 
            const loadedPosts = action.payload.map(post => {
                post.date = sub(new Date(),{minutes:min++}).toISOString()
                post.reactions = {
                    thumbsUp: 0,
                    hooray:0,
                    heart:0,
                    rocket:0,
                    eyes:0
                }
                return post;
            })
            // Add any fetched posts to the array 
            state.posts = state.posts.concat(loadedPosts)
        })
        .addCase(fetchPosts.rejected,(state,action) => {
            state.status = 'failed'
            state.error = action.error.message
        })
//.............................................................
        .addCase(addNewPost.fulfilled, (state,action) => {
            action.payload.userId = Number(action.payload.userId)
            action.payload.date = new Date().toISOString();
            action.payload.reactions = {
                thumbsUp: 0,
                    wow:0,
                    heart:0,
                    rocket:0,
                    coffee:0 
            }
            console.log(action.payload)
            state.posts.push(action.payload)
        })
//.............................................................
}

})

export const getAllpost = (state) => state.posts.posts
export const getPostsStatus = (state) => state.posts.status
export const getPostsError = (state) => state.posts.error

export const {postAdd,reactionAdded} = postSlice.actions

export default postSlice.reducer





######################################################################################################################3
AddPostForm.js





import React, {  useState } from 'react'
// import { nanoid } from '@reduxjs/toolkit'

import { useDispatch,useSelector } from 'react-redux'
//..........................................................
import { addNewPost } from './postSlice'
//..........................................................
import { getAllUsers } from '../../../Users/userSlice'



function AddPostForm (){
    const dispatch = useDispatch()
    const postAllUsers = useSelector(getAllUsers)

    const [title,setTitle] = useState('')
    const [content,setContent] = useState('')
    const [userId,setUserId] = useState('')
//..............................................................................
    const [addRequestStatus,setAddRequestStatus] = useState('idle')
//..............................................................................
      
    const Htitle = (e) => setTitle(e.target.value)
    const HContent =(e) => setContent(e.target.value)
    const HAuthUser =(e) => setUserId(e.target.value)
    
        


//...........................................................................
    const canSave =  [title,content,userId].every(Boolean) && addRequestStatus === 'idle'
//...........................................................................

//...........................................................................................................
    const onSavePostClicked = () => {
        if(canSave){
            try{
                setAddRequestStatus('pending') 
                dispatch(addNewPost({title, body:content,userId})).unwrap()
                //redux has an unwrap function to the return promise and that returns 
                // a new promise to the new or it throw an error if it's the regected action 

                setTitle('')
                setContent('')
                setUserId('')
            }catch(err){
                console.error('Failed to save the post',err)
            }finally{
                setAddRequestStatus('idle')
            }
        }
    }
//.................................................................................................................
    

    const userOptions = postAllUsers.map(user => {
        return <option key={user.id} value={user.id}>
            {user.id}  {user.name}
        </option>
    })

  return (
    <div>
        <form>
           <div> Title : <input
            name="title"
            id='title'
            value={title}
            onChange={Htitle}
            /></div>
           <div> Content :<input
            name="content"
            id='content'
            value={content}
            onChange={HContent}
            /></div>
           <select id="postAuthor" name='userId' onChange={HAuthUser} value={userId}>
                <option value="chose user"></option>
                {userOptions}
           </select>

           </form>
           <button onClick={onSavePostClicked}
            disabled = {canSave? false : true}
           >Save to list</button>
              
<div>
<p>{title}</p>
<p>{content}</p>
</div>

    </div>
  )
}
export default AddPostForm


######################################################################################################################################


######################################################################################################################################


######################################################################################################################################


######################################################################################################################################


######################################################################################################################################



######################################################################################################################################


######################################################################################################################################


######################################################################################################################################


######################################################################################################################################


######################################################################################################################################


######################################################################################################################################











