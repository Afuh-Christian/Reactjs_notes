.......dependensies array ..... 

this is the second parameter you place in the useEffect function 



dependensies array
-if the change from one render to the next , will cause  the effect to run
-ie ,,, it limit's the number of times the useEffect will run (or determines when the useEffect will run instead of running after every single render )


useEffect(()=>{} 
//........dependency array..........
  , [] )
//..................

-[] = run the useEffect on the very first render of the component
     -then there are no dependencies to watch and trigger this effect again 
     -ie..it run's when the component first loads and that it..never again (only when the component reloads)
	useEffect(()=>{},[]) 
-[count] = run the useEffect everytime the value of count changed (NB..count is a variable with initial state = 0 and increments after a btn click )
	useEffect(()=>{},[count]) 
	-What happens under the hood (
		-it runs the very first time when count = 0
		-when count in increamented to 1 ......
		-[0] compare to [1] ...if they are not thesame 
			-it reruns the useEffect()
		-else 
			does not rerun the useEffect()



...that's why it's called dependency array because useEffect depends on these values to know wether it should rerun the useEffect()


################################
import React, { useEffect, useState } from "react";








export default function UseEffect(){ 
    const [count,setCount] = useState(0)
  
    
    function Add(){
        setCount((prevcount)=>
        {
            const i = prevcount + 1
            return i 
        })
    }
    
    useEffect(() => {
        console.log("Hello useEffect base")
    },[count])
    
    return(
        <div>
            
        <h1>UseEffect in action</h1>

<button onClick={Add}>Add</button>

<p>{count}</p>
        </div>
    )

}
###################################



